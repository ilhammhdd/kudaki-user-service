// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/consumer.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConsumerRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Done                 bool     `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerRequest) Reset()         { *m = ConsumerRequest{} }
func (m *ConsumerRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumerRequest) ProtoMessage()    {}
func (*ConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_338ae3f277b86329, []int{0}
}

func (m *ConsumerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerRequest.Unmarshal(m, b)
}
func (m *ConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerRequest.Marshal(b, m, deterministic)
}
func (m *ConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRequest.Merge(m, src)
}
func (m *ConsumerRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumerRequest.Size(m)
}
func (m *ConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRequest proto.InternalMessageInfo

func (m *ConsumerRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ConsumerRequest) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type ConsumerMessage struct {
	Values               []byte               `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConsumerMessage) Reset()         { *m = ConsumerMessage{} }
func (m *ConsumerMessage) String() string { return proto.CompactTextString(m) }
func (*ConsumerMessage) ProtoMessage()    {}
func (*ConsumerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_338ae3f277b86329, []int{1}
}

func (m *ConsumerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerMessage.Unmarshal(m, b)
}
func (m *ConsumerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerMessage.Marshal(b, m, deterministic)
}
func (m *ConsumerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerMessage.Merge(m, src)
}
func (m *ConsumerMessage) XXX_Size() int {
	return xxx_messageInfo_ConsumerMessage.Size(m)
}
func (m *ConsumerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerMessage proto.InternalMessageInfo

func (m *ConsumerMessage) GetValues() []byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ConsumerMessage) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsumerRequest)(nil), "service.kafka.ConsumerRequest")
	proto.RegisterType((*ConsumerMessage)(nil), "service.kafka.ConsumerMessage")
}

func init() { proto.RegisterFile("services/consumer.proto", fileDescriptor_338ae3f277b86329) }

var fileDescriptor_338ae3f277b86329 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4b, 0xf4, 0x30,
	0x10, 0xc5, 0xc9, 0xf7, 0xe9, 0xda, 0x8d, 0x8a, 0x10, 0x44, 0x4b, 0x0f, 0x5a, 0xf6, 0xd4, 0xcb,
	0x26, 0xb2, 0x5e, 0x44, 0x6f, 0x0a, 0xde, 0xf6, 0x52, 0xbc, 0xe8, 0x2d, 0x6d, 0x67, 0xdb, 0xd0,
	0xa6, 0xa9, 0x9d, 0x64, 0xff, 0x7e, 0xa1, 0x4d, 0x5c, 0x14, 0xbc, 0xcd, 0xf0, 0x7e, 0x33, 0xf3,
	0x1e, 0x43, 0xaf, 0x11, 0xc6, 0xbd, 0x2a, 0x01, 0x45, 0x69, 0x7a, 0x74, 0x1a, 0x46, 0x3e, 0x8c,
	0xc6, 0x1a, 0x76, 0xee, 0x05, 0xde, 0xca, 0x5d, 0x2b, 0x93, 0xdb, 0xda, 0x98, 0xba, 0x03, 0x31,
	0x89, 0x85, 0xdb, 0x09, 0xab, 0x34, 0xa0, 0x95, 0x7a, 0x98, 0xf9, 0xd5, 0x13, 0xbd, 0x78, 0xf1,
	0x1b, 0x72, 0xf8, 0x74, 0x80, 0x96, 0x5d, 0xd2, 0x63, 0x6b, 0x06, 0x55, 0xc6, 0x24, 0x25, 0xd9,
	0x32, 0x9f, 0x1b, 0xc6, 0xe8, 0x51, 0x65, 0x7a, 0x88, 0xff, 0xa5, 0x24, 0x8b, 0xf2, 0xa9, 0x5e,
	0x95, 0x87, 0xe1, 0x2d, 0x20, 0xca, 0x1a, 0xd8, 0x15, 0x5d, 0xec, 0x65, 0xe7, 0x00, 0x27, 0xf0,
	0x2c, 0xf7, 0x1d, 0x7b, 0xa0, 0xcb, 0xef, 0xd3, 0xf1, 0xff, 0x94, 0x64, 0xa7, 0x9b, 0x84, 0xcf,
	0xe6, 0x78, 0x30, 0xc7, 0xdf, 0x02, 0x91, 0x1f, 0xe0, 0xcd, 0x3b, 0x8d, 0xc2, 0x11, 0xb6, 0xa5,
	0x27, 0xbe, 0x66, 0x37, 0xfc, 0x47, 0x52, 0xfe, 0x2b, 0x45, 0xf2, 0x97, 0xee, 0x8d, 0x66, 0xe4,
	0x8e, 0x3c, 0xbf, 0xd2, 0x08, 0x7a, 0xab, 0xac, 0x02, 0xfc, 0x78, 0xac, 0x95, 0x6d, 0x5c, 0xc1,
	0x4b, 0xa3, 0x85, 0xea, 0x1a, 0xa9, 0x75, 0x53, 0x55, 0xa2, 0x75, 0x95, 0x6c, 0xd5, 0xda, 0x21,
	0x8c, 0x6b, 0xbf, 0x4f, 0x84, 0x11, 0x11, 0x7e, 0x50, 0x2c, 0xa6, 0x04, 0xf7, 0x5f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe5, 0xaf, 0xb1, 0x61, 0x96, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerClient interface {
	Consume(ctx context.Context, opts ...grpc.CallOption) (Consumer_ConsumeClient, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) Consume(ctx context.Context, opts ...grpc.CallOption) (Consumer_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consumer_serviceDesc.Streams[0], "/service.kafka.Consumer/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerConsumeClient{stream}
	return x, nil
}

type Consumer_ConsumeClient interface {
	Send(*ConsumerRequest) error
	Recv() (*ConsumerMessage, error)
	grpc.ClientStream
}

type consumerConsumeClient struct {
	grpc.ClientStream
}

func (x *consumerConsumeClient) Send(m *ConsumerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consumerConsumeClient) Recv() (*ConsumerMessage, error) {
	m := new(ConsumerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerServer is the server API for Consumer service.
type ConsumerServer interface {
	Consume(Consumer_ConsumeServer) error
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsumerServer).Consume(&consumerConsumeServer{stream})
}

type Consumer_ConsumeServer interface {
	Send(*ConsumerMessage) error
	Recv() (*ConsumerRequest, error)
	grpc.ServerStream
}

type consumerConsumeServer struct {
	grpc.ServerStream
}

func (x *consumerConsumeServer) Send(m *ConsumerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consumerConsumeServer) Recv() (*ConsumerRequest, error) {
	m := new(ConsumerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.kafka.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _Consumer_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/consumer.proto",
}
