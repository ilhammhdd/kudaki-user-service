// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/producer.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProducerMessage struct {
	Topic                string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Value                []byte               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProducerMessage) Reset()         { *m = ProducerMessage{} }
func (m *ProducerMessage) String() string { return proto.CompactTextString(m) }
func (*ProducerMessage) ProtoMessage()    {}
func (*ProducerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5670a78422f5982c, []int{0}
}

func (m *ProducerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProducerMessage.Unmarshal(m, b)
}
func (m *ProducerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProducerMessage.Marshal(b, m, deterministic)
}
func (m *ProducerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProducerMessage.Merge(m, src)
}
func (m *ProducerMessage) XXX_Size() int {
	return xxx_messageInfo_ProducerMessage.Size(m)
}
func (m *ProducerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProducerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProducerMessage proto.InternalMessageInfo

func (m *ProducerMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ProducerMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ProducerMessage) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Status struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors               []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_5670a78422f5982c, []int{1}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Status) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*ProducerMessage)(nil), "service.kafka.ProducerMessage")
	proto.RegisterType((*Status)(nil), "service.kafka.Status")
}

func init() { proto.RegisterFile("services/producer.proto", fileDescriptor_5670a78422f5982c) }

var fileDescriptor_5670a78422f5982c = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x4f, 0x4f, 0x02, 0x31,
	0x10, 0xc5, 0x53, 0x88, 0x08, 0x05, 0x63, 0xd2, 0xf8, 0x67, 0xc3, 0x41, 0x37, 0x9c, 0xf6, 0x42,
	0x9b, 0xe0, 0xc5, 0x70, 0xd3, 0x18, 0x3d, 0x99, 0x98, 0xc5, 0x93, 0xb7, 0xd2, 0x1d, 0x96, 0x66,
	0x59, 0xba, 0xe9, 0xb4, 0x18, 0x3f, 0x8a, 0xdf, 0xd6, 0xc8, 0xb6, 0x1a, 0xb9, 0x7a, 0xfc, 0xf5,
	0xbd, 0xbe, 0x37, 0x9d, 0xd2, 0x4b, 0x04, 0xbb, 0xd3, 0x0a, 0x50, 0x34, 0xd6, 0x14, 0x5e, 0x81,
	0xe5, 0x8d, 0x35, 0xce, 0xb0, 0x93, 0x20, 0xf0, 0x4a, 0xae, 0x2a, 0x39, 0xbe, 0x2e, 0x8d, 0x29,
	0x37, 0x20, 0xf6, 0xe2, 0xd2, 0xaf, 0x84, 0xd3, 0x35, 0xa0, 0x93, 0x75, 0xd3, 0xfa, 0x27, 0xef,
	0xf4, 0xf4, 0x25, 0x24, 0x3c, 0x03, 0xa2, 0x2c, 0x81, 0x9d, 0xd1, 0x23, 0x67, 0x1a, 0xad, 0x12,
	0x92, 0x92, 0x6c, 0x90, 0xb7, 0xf0, 0x7d, 0xba, 0x93, 0x1b, 0x0f, 0x49, 0x27, 0x25, 0xd9, 0x28,
	0x6f, 0x81, 0xdd, 0xd2, 0xc1, 0x4f, 0x62, 0xd2, 0x4d, 0x49, 0x36, 0x9c, 0x8d, 0x79, 0xdb, 0xc9,
	0x63, 0x27, 0x7f, 0x8d, 0x8e, 0xfc, 0xd7, 0x3c, 0x99, 0xd3, 0xde, 0xc2, 0x49, 0xe7, 0x91, 0x25,
	0xf4, 0x18, 0xbd, 0x52, 0x80, 0xb8, 0x6f, 0xec, 0xe7, 0x11, 0xd9, 0x05, 0xed, 0x81, 0xb5, 0xc6,
	0x62, 0xd2, 0x49, 0xbb, 0xd9, 0x20, 0x0f, 0x34, 0xfb, 0x24, 0xb4, 0x1f, 0xa7, 0x66, 0x0f, 0x74,
	0xb8, 0xf8, 0xd8, 0xaa, 0xc0, 0xec, 0x8a, 0xff, 0xd9, 0x00, 0x3f, 0x78, 0xdd, 0xf8, 0xfc, 0x40,
	0x0f, 0x43, 0x3c, 0xd1, 0xd1, 0x1d, 0xfe, 0x3b, 0x26, 0x23, 0xf7, 0x8f, 0xb4, 0x0f, 0x5b, 0xa7,
	0x9d, 0x06, 0x7c, 0x9b, 0x97, 0xda, 0xad, 0xfd, 0x92, 0x2b, 0x53, 0x0b, 0xbd, 0x59, 0xcb, 0xba,
	0x5e, 0x17, 0x85, 0xa8, 0x7c, 0x21, 0x2b, 0x3d, 0xf5, 0x08, 0x76, 0x1a, 0x42, 0x44, 0xbc, 0x22,
	0xe2, 0xbf, 0x2e, 0x7b, 0xfb, 0xf5, 0xdd, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0x44, 0xe1, 0xf9,
	0x97, 0xea, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProducerClient is the client API for Producer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProducerClient interface {
	SyncProduce(ctx context.Context, in *ProducerMessage, opts ...grpc.CallOption) (*Status, error)
	AsyncProduce(ctx context.Context, opts ...grpc.CallOption) (Producer_AsyncProduceClient, error)
}

type producerClient struct {
	cc *grpc.ClientConn
}

func NewProducerClient(cc *grpc.ClientConn) ProducerClient {
	return &producerClient{cc}
}

func (c *producerClient) SyncProduce(ctx context.Context, in *ProducerMessage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/service.kafka.Producer/SyncProduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerClient) AsyncProduce(ctx context.Context, opts ...grpc.CallOption) (Producer_AsyncProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Producer_serviceDesc.Streams[0], "/service.kafka.Producer/AsyncProduce", opts...)
	if err != nil {
		return nil, err
	}
	x := &producerAsyncProduceClient{stream}
	return x, nil
}

type Producer_AsyncProduceClient interface {
	Send(*ProducerMessage) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type producerAsyncProduceClient struct {
	grpc.ClientStream
}

func (x *producerAsyncProduceClient) Send(m *ProducerMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *producerAsyncProduceClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProducerServer is the server API for Producer service.
type ProducerServer interface {
	SyncProduce(context.Context, *ProducerMessage) (*Status, error)
	AsyncProduce(Producer_AsyncProduceServer) error
}

func RegisterProducerServer(s *grpc.Server, srv ProducerServer) {
	s.RegisterService(&_Producer_serviceDesc, srv)
}

func _Producer_SyncProduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProducerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServer).SyncProduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.kafka.Producer/SyncProduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServer).SyncProduce(ctx, req.(*ProducerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Producer_AsyncProduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProducerServer).AsyncProduce(&producerAsyncProduceServer{stream})
}

type Producer_AsyncProduceServer interface {
	SendAndClose(*Status) error
	Recv() (*ProducerMessage, error)
	grpc.ServerStream
}

type producerAsyncProduceServer struct {
	grpc.ServerStream
}

func (x *producerAsyncProduceServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *producerAsyncProduceServer) Recv() (*ProducerMessage, error) {
	m := new(ProducerMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Producer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.kafka.Producer",
	HandlerType: (*ProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncProduce",
			Handler:    _Producer_SyncProduce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AsyncProduce",
			Handler:       _Producer_AsyncProduce_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/producer.proto",
}
