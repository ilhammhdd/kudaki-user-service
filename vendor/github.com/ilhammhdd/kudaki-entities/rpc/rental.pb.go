// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/rental.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	events "github.com/ilhammhdd/kudaki-entities/events"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc/rental.proto", fileDescriptor_d1c93b114b4e8bf1) }

var fileDescriptor_d1c93b114b4e8bf1 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcd, 0xbb, 0x0a, 0x02, 0x31,
	0x10, 0x85, 0xe1, 0x42, 0xd8, 0x62, 0xb1, 0xd0, 0xb5, 0x91, 0x7d, 0x02, 0x11, 0x4c, 0x40, 0x4b,
	0x3b, 0xc5, 0x17, 0x58, 0x3b, 0xbb, 0x5c, 0x06, 0x33, 0x64, 0x73, 0x31, 0x99, 0xf1, 0xf9, 0x85,
	0x60, 0xa1, 0xe5, 0xcf, 0x77, 0xe0, 0xf4, 0xab, 0x92, 0x8d, 0x2c, 0x10, 0x49, 0xcd, 0x22, 0x97,
	0x44, 0x69, 0x58, 0x94, 0x6c, 0xc6, 0x0d, 0xbc, 0x21, 0x52, 0xfd, 0x93, 0xe3, 0xad, 0xef, 0xa6,
	0xd6, 0xc3, 0xb9, 0x5f, 0xde, 0x59, 0x07, 0xa4, 0x6f, 0x6f, 0x45, 0xdb, 0x8b, 0xab, 0x03, 0xe3,
	0x13, 0xd3, 0x04, 0x2f, 0x86, 0x4a, 0x60, 0xc7, 0xf5, 0xaf, 0x80, 0x4d, 0x4c, 0x97, 0xfd, 0x63,
	0xf7, 0x44, 0x72, 0xac, 0x85, 0x49, 0x41, 0xe2, 0xec, 0x54, 0x08, 0xce, 0x5a, 0xe9, 0xd9, 0x2a,
	0x8f, 0x07, 0x88, 0x84, 0x84, 0x50, 0x65, 0xc9, 0x46, 0x77, 0xed, 0xf9, 0xf4, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x3e, 0x33, 0xc9, 0x8c, 0xa7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RentalClient is the client API for Rental service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RentalClient interface {
	SubmitRental(ctx context.Context, in *events.CheckoutRequested, opts ...grpc.CallOption) (*events.Checkedout, error)
}

type rentalClient struct {
	cc *grpc.ClientConn
}

func NewRentalClient(cc *grpc.ClientConn) RentalClient {
	return &rentalClient{cc}
}

func (c *rentalClient) SubmitRental(ctx context.Context, in *events.CheckoutRequested, opts ...grpc.CallOption) (*events.Checkedout, error) {
	out := new(events.Checkedout)
	err := c.cc.Invoke(ctx, "/rpc.Rental/SubmitRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentalServer is the server API for Rental service.
type RentalServer interface {
	SubmitRental(context.Context, *events.CheckoutRequested) (*events.Checkedout, error)
}

// UnimplementedRentalServer can be embedded to have forward compatible implementations.
type UnimplementedRentalServer struct {
}

func (*UnimplementedRentalServer) SubmitRental(ctx context.Context, req *events.CheckoutRequested) (*events.Checkedout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRental not implemented")
}

func RegisterRentalServer(s *grpc.Server, srv RentalServer) {
	s.RegisterService(&_Rental_serviceDesc, srv)
}

func _Rental_SubmitRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.CheckoutRequested)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServer).SubmitRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Rental/SubmitRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServer).SubmitRental(ctx, req.(*events.CheckoutRequested))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rental_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Rental",
	HandlerType: (*RentalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitRental",
			Handler:    _Rental_SubmitRental_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rental.proto",
}
