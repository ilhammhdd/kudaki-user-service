// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/mountain.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	events "github.com/ilhammhdd/kudaki-entities/events"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc/mountain.proto", fileDescriptor_66140431736898dc) }

var fileDescriptor_66140431736898dc = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x2a, 0x48, 0xd6,
	0xcf, 0xcd, 0x2f, 0xcd, 0x2b, 0x49, 0xcc, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2e, 0x2a, 0x48, 0x96, 0x12, 0x4d, 0x2d, 0x4b, 0xcd, 0x2b, 0x29, 0x46, 0x93, 0x33, 0x8a, 0xe5,
	0xe2, 0xf0, 0x85, 0x8a, 0x08, 0x05, 0x72, 0x09, 0x06, 0xa5, 0x96, 0x14, 0x65, 0xa6, 0x96, 0xa5,
	0xc2, 0xc4, 0x8a, 0x85, 0x14, 0xf5, 0xc0, 0x1a, 0xf5, 0x30, 0x64, 0x82, 0x52, 0x0b, 0x4b, 0x53,
	0x8b, 0x4b, 0x52, 0x53, 0xa4, 0x24, 0xa1, 0x4a, 0x90, 0xa4, 0x20, 0x6a, 0x53, 0x9c, 0xb4, 0xa2,
	0x34, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x33, 0x73, 0x32, 0x12,
	0x73, 0x73, 0x33, 0x52, 0x52, 0xf4, 0xb3, 0x4b, 0x53, 0x12, 0xb3, 0x33, 0x75, 0x53, 0xf3, 0x4a,
	0x32, 0x4b, 0x32, 0x53, 0x8b, 0xf5, 0x8b, 0x0a, 0x92, 0x93, 0xd8, 0xc0, 0x2e, 0x32, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0xef, 0x19, 0x1c, 0xc3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MountainClient is the client API for Mountain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MountainClient interface {
	RetrieveMountains(ctx context.Context, in *events.RetrieveMountainsRequested, opts ...grpc.CallOption) (*events.MountainsRetrieved, error)
}

type mountainClient struct {
	cc *grpc.ClientConn
}

func NewMountainClient(cc *grpc.ClientConn) MountainClient {
	return &mountainClient{cc}
}

func (c *mountainClient) RetrieveMountains(ctx context.Context, in *events.RetrieveMountainsRequested, opts ...grpc.CallOption) (*events.MountainsRetrieved, error) {
	out := new(events.MountainsRetrieved)
	err := c.cc.Invoke(ctx, "/rpc.Mountain/RetrieveMountains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MountainServer is the server API for Mountain service.
type MountainServer interface {
	RetrieveMountains(context.Context, *events.RetrieveMountainsRequested) (*events.MountainsRetrieved, error)
}

func RegisterMountainServer(s *grpc.Server, srv MountainServer) {
	s.RegisterService(&_Mountain_serviceDesc, srv)
}

func _Mountain_RetrieveMountains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.RetrieveMountainsRequested)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MountainServer).RetrieveMountains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Mountain/RetrieveMountains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MountainServer).RetrieveMountains(ctx, req.(*events.RetrieveMountainsRequested))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mountain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Mountain",
	HandlerType: (*MountainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveMountains",
			Handler:    _Mountain_RetrieveMountains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/mountain.proto",
}
